apply plugin: 'java'
apply plugin: 'rup-java'

buildscript {
    repositories {
        maven {url rupRepoExtUrl}
        ivy {url rupRepoReleaseUrl}
        if (project.hasProperty('developPlugins')) {
            ivy {url file(System.getProperty('user.home') + '/.ivylocal')}
        }
    }
    dependencies {
        classpath("com.copyright.rup.scm:gradle-plugins:${rupGradlePluginsVersion}")
    }
}

dependencies {
    compile ("org.springframework:spring-webmvc:${rupJava.standardDependencies.spring.version}")

    compile ("com.copyright.rup.common:rup-common-util:${rupGradlePluginsVersion}")

    compile ("com.thoughtworks.xstream:xstream:1.4.+")
    // Not using jackson 2.0 because of lack of spring support
    compile ("org.codehaus.jackson:jackson-mapper-asl:1.9.+")
    compile ("org.springframework:spring-oxm:${rupJava.standardDependencies.spring.version}")

    compile ("org.springframework:spring-web:${rupJava.standardDependencies.spring.version}")
    compile ("org.springframework:spring-webmvc:${rupJava.standardDependencies.spring.version}")

    //TODO: cannot use providedCompile without war plugin
    compile ("javax.servlet:javax.servlet-api:3.0.1")

    //compile ("org.powermock:powermock-api-easymock:1.4.9")
	
	//MyBatis
	compile ("org.mybatis:mybatis:3.1.1")
	compile ("postgresql:postgresql:9.1-901-1.jdbc4")
	compile ("org.mybatis:mybatis-spring:1.1.1")
	compile ("commons-dbcp:commons-dbcp:1.4")

    compile ("org.springframework:spring-test:${rupJava.standardDependencies.spring.version}")
    compile ("junit:junit-dep:${rupJava.standardDependencies.junit.version}")

    compile ("commons-lang:commons-lang:2.4")
}

task loadProperties {
    def props = ['../../config.properties']
    def userProps = new Properties() 
    props.each { property ->
        userProps.load(new FileReader("${project.projectDir}${System.properties['file.separator']}${property}")) 
    }
    rootProject.getAdditionalProperties().putAll(userProps)
}
processResources.dependsOn loadProperties

/*
task loadWebProperties(type: Copy) {
    println '--------------------------------------------------------------------------------------------------------'
    def sep = System.properties['file.separator'];
    println "${project.projectDir}${sep}src${sep}main${sep}resources"
    println "${rootProject.buildDir}${sep}resources${sep}main"
    println '--------------------------------------------------------------------------------------------------------'
    from "${project.projectDir}${sep}src${sep}main${sep}resources"
    into "${rootProject.buildDir}${sep}resources${sep}main"
}
*/

/*
[processResources,build].each{ task ->
    task.dependsOn loadProperties
}
*/
